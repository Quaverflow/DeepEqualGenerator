// <auto-generated/>
#nullable enable
using System;
using DeepEqual.Generator.Shared;

namespace DeepEqual
{
    /// <summary>
    /// Runtime object facade that dispatches by runtime type via the generated registry.
    /// </summary>
    public static class DeepOps
    {
        public static bool AreEqual(object? a, object? b, ComparisonOptions? opts = null)
        {
            var ctx = opts is null ? new ComparisonContext() : new ComparisonContext(opts);
            if (ReferenceEquals(a, b)) return true;
            if (a is null || b is null) return false;

            var ta = a.GetType();
            if (!ReferenceEquals(ta, b.GetType())) return false;

            if (GeneratedHelperRegistry.TryCompareSameType(ta, a, b, ctx, out var eq))
                return eq;

            // Fallback: value-like compare & dynamic container support
            return DynamicDeepComparer.AreEqualDynamic(a, b, ctx);
        }

        public static (bool has, IDiff diff) GetDiff(object? a, object? b, ComparisonOptions? opts = null)
        {
            var ctx = opts is null ? new ComparisonContext() : new ComparisonContext(opts);
            if (ReferenceEquals(a, b)) return (false, Diff.Empty);
            if (a is null && b is not null) return (true, Diff<object>.Replacement(b));
            if (a is not null && b is null) return (true, Diff<object>.Replacement(b));

            var ta = a!.GetType();
            if (!ReferenceEquals(ta, b!.GetType())) return (true, Diff<object>.Replacement(b));

            if (GeneratedHelperRegistry.TryGetDiffSameType(ta, a, b, ctx, out var id)) return (!id.IsEmpty, id);

            // No typed provider registered – synthesize as replacement when not equal
            return (!AreEqual(a, b, opts), Diff<object>.Replacement(b));
        }

        public static DeltaDocument ComputeDelta(object? a, object? b, ComparisonOptions? opts = null)
        {
            var ctx = opts is null ? new ComparisonContext() : new ComparisonContext(opts);
            var doc = new DeltaDocument();
            var w = new DeltaWriter(doc);

            if (ReferenceEquals(a, b)) return doc;

            var ta = a?.GetType();
            var tb = b?.GetType();
            if (ta is null || tb is null || !ReferenceEquals(ta, tb))
            {
                w.WriteReplaceObject(b);
                return doc;
            }

            GeneratedHelperRegistry.ComputeDeltaSameType(ta, a, b, ctx, ref w);
            return doc;
        }

        public static void ApplyDelta(ref object? target, DeltaDocument delta, ComparisonOptions? opts = null)
        {
            var reader = new DeltaReader(delta);
            if (target is null) return;

            var t = target.GetType();
            if (!GeneratedHelperRegistry.TryApplyDeltaSameType(t, ref target, ref reader))
            {
                // nothing registered – best we can do is full replace if present
                foreach (ref readonly var op in reader.AsSpan())
                {
                    if (op.Kind == DeltaKind.ReplaceObject)
                    {
                        target = op.Value;
                        break;
                    }
                }
            }
        }
    }
}