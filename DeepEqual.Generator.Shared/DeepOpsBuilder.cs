// <auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace DeepEqual
{
    /// <summary>
    /// Fluent, compile-time configuration entrypoint. The generator reads calls made inside
    /// <c>DeepOpsConfig.Configure(DeepOpsBuilder b)</c> and produces the merged configuration.
    /// All methods are no-op at runtime and only record intent for Roslyn to read.
    /// </summary>
    public sealed class DeepOpsBuilder
    {
        public RootBuilder ForRoot<TRoot>(Preset preset = Preset.Default) => new(typeof(TRoot), preset);
        public ExternalBuilder ForExternal<TRoot>() => new(typeof(TRoot));

        // Global knobs (no-op at runtime, captured by generator)
        public DeepOpsBuilder StableMemberIndices(bool on = true) => this;
        public DeepOpsBuilder StringComparison(StringComparison comparison) => this;
        public DeepOpsBuilder FloatEpsilon(double eps) => this;
        public DeepOpsBuilder DecimalEpsilon(decimal eps) => this;
        public DeepOpsBuilder TreatNaNEqual(bool on = true) => this;
    }

    public enum Preset { Default }

    /// <summary>Root-scoped configuration builder. No runtime behavior.</summary>
    public sealed class RootBuilder
    {
        internal RootBuilder(Type root, Preset preset) { }

        public RootBuilder GenerateDelta(bool on = true) => this;
        public RootBuilder GenerateDiff(bool on = true) => this;
        public RootBuilder IncludeInternals(bool on = true) => this;

        /// <summary>Make sequences of <typeparamref name="TElement"/> order-insensitive under this root.</summary>
        public RootBuilder OrderInsensitiveFor<TElement>(bool on = true) => this;

        /// <summary>Declare the stable key for <typeparamref name="TElement"/> used in unordered comparison/delta.</summary>
        public RootBuilder KeyFor<TElement>(Expression<Func<TElement, object?>> key) => this;

        /// <summary>Default comparison kind for <typeparamref name="T"/>.</summary>
        public RootBuilder ShallowFor<T>(bool on = true) => this;
        public RootBuilder ReferenceFor<T>(bool on = true) => this;

        /// <summary>Skip a specific member (e.g., <c>x =&gt; x.Fingerprint</c>).</summary>
        public RootBuilder Skip<T>(Expression<Func<T, object?>> selector) => this;

        /// <summary>Provide a comparer for a value-like type.</summary>
        public RootBuilder Comparer<T>(IEqualityComparer<T> comparer) => this;

        /// <summary>Enable dirty-tracking ([DeltaTrack]) so emitted deltas only include changed members.</summary>
        public RootBuilder TrackMutations(bool on = true) => this;
    }

    /// <summary>Configure types you don't own. No runtime behavior.</summary>
    public sealed class ExternalBuilder
    {
        internal ExternalBuilder(Type externalRoot) { }

        public ExternalBuilder AdoptAsRoot(bool generateDelta = true, bool generateDiff = true) => this;
        public ExternalBuilder GenerateDelta(bool on = true) => this;
        public ExternalBuilder GenerateDiff(bool on = true) => this;

        public PathBuilder ForPath(string path) => new(path);

        public sealed class PathBuilder
        {
            internal PathBuilder(string path) { }
            public ExternalBuilder AsKey() => new ExternalBuilder(typeof(object));
            public PathBuilder OrderInsensitive(bool on = true) => this;
            public PathBuilder Shallow(bool on = true) => this;
            public ExternalBuilder Skip() => new ExternalBuilder(typeof(object));
        }
    }

    /// <summary>
    /// The user creates this type in their project and places all fluent calls inside <see cref="Configure"/>.
    /// </summary>
    public static partial class DeepOpsConfig
    {
        /// <summary>
        /// The generator will find this method and statically analyze the fluent calls.
        /// This method is never executed at runtime.
        /// </summary>
        public static void Configure(DeepOpsBuilder b) { }
    }
}