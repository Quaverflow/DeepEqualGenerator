diff --git a/DeepEqual.Generator/DiffDeltaEmitter.cs b/DeepEqual.Generator/DiffDeltaEmitter.cs
index 0878f04..6b8a1fa 100644
--- a/DeepEqual.Generator/DiffDeltaEmitter.cs
+++ b/DeepEqual.Generator/DiffDeltaEmitter.cs
@@ -222,7 +222,6 @@ internal sealed class DiffDeltaEmitter
         w.Line("// <auto-generated/>");
         w.Line("#pragma warning disable");
         w.Line("using System;");
-        w.Line("using System.Numerics;");
         w.Line("using System.Runtime.CompilerServices;");
         w.Line("using System.Threading;");
 
@@ -255,6 +254,20 @@ internal sealed class DiffDeltaEmitter
             w.Line("while (Interlocked.CompareExchange(ref location, computed, initial) != initial);");
             w.Line("return computed;");
             w.Close();
         }
+
+        w.Line();
+        w.Open("private static int __TrailingZeroCount(ulong value)");
+        w.Open("if (value == 0)");
+        w.Line("return 64;");
+        w.Close();
+        w.Line("int count = 0;");
+        w.Open("while ((value & 1UL) == 0)");
+        w.Line("count++;");
+        w.Line("value >>= 1;");
+        w.Close();
+        w.Line("return count;");
+        w.Close();
+        w.Line();
 
         w.Open("[MethodImpl(MethodImplOptions.AggressiveInlining)] internal void __MarkDirty(int bit)");
         w.Open("if ((uint)bit <= 63)");
         if (threadSafe)
             w.Line("__AtomicOr(ref __dirty0, 1L << bit);");
@@ -281,7 +294,7 @@ internal sealed class DiffDeltaEmitter
         w.Line("var w0 = Volatile.Read(ref __dirty0);");
         w.Open("if (w0 != 0)");
         w.Line("var u = (ulong)w0;");
-        w.Line("var tz = BitOperations.TrailingZeroCount(u);");
+        w.Line("var tz = __TrailingZeroCount(u);");
         if (threadSafe)
             w.Line("__AtomicAnd(ref __dirty0, ~(1L << tz));");
         else
             w.Line("__dirty0 &= ~(1L << tz);");
@@ -296,7 +309,7 @@ internal sealed class DiffDeltaEmitter
         w.Line("var wi = Volatile.Read(ref ex[i]);");
         w.Open("if (wi != 0)");
         w.Line("var u2 = (ulong)wi;");
-        w.Line("var tz2 = BitOperations.TrailingZeroCount(u2);");
+        w.Line("var tz2 = __TrailingZeroCount(u2);");
         if (threadSafe)
             w.Line("__AtomicAnd(ref ex[i], ~(1L << tz2));");
         else
             w.Line("ex[i] &= ~(1L << tz2);");
@@ -488,6 +501,11 @@ internal sealed class DiffDeltaEmitter
             {
                 // Dirty-track emission (unchanged from your version; shortened comment)
                 w.Line("var __validate = context.Options.ValidateDirtyOnEmit;");
                 w.Line("var __r = right;");
-                w.Open("if (__r is not null && __r.__HasAnyDirty())");
-                foreach (var m in ordered)
+                w.Open("if (__r is not null && __r.__HasAnyDirty())");
+                w.Open("if (__validate)");
+                w.Line("while (__r.__TryPopNextDirty(out _)) { }");
+                foreach (var m in ordered) EmitMemberDelta(w, type, m, root);
+                w.Close();
+                w.Open("else");
+                foreach (var m in ordered)
                 {
                     var idx = GetStableMemberIndex(type, m);
                     w.Line($"bool __emitted_m{idx} = false;");
@@ -636,8 +654,9 @@ internal sealed class DiffDeltaEmitter
                         }
                     }
                 }
-                w.Close(); // if tracked
-                w.Open("else");
+                w.Close();
+                w.Close();
+                w.Open("else");
                 foreach (var m in ordered) EmitMemberDelta(w, type, m, root);
                 w.Close();
 
