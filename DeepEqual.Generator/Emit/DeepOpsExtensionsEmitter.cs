// <auto-generated/>
#nullable enable
using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace DeepEqual.Generator
{
    internal sealed class DeepOpsExtensionsEmitter
    {
        public void Emit(SourceProductionContext spc, (INamedTypeSymbol Type, bool GenDiff, bool GenDelta)[] roots)
        {
            var w = new CodeWriter();
            w.Line("// <auto-generated/>");
            w.Line("#pragma warning disable");
            w.Line("using System;");
            w.Line("using DeepEqual;");
            w.Line("using DeepEqual.Generator.Shared;");
            w.Line();
            w.Open("namespace DeepEqual");

            w.Line("/// <summary>Optional instance extension methods for discoverability.</summary>");
            w.Open("public static partial class DeepOpsExtensions");

            foreach (var r in roots.OrderBy(r => r.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat), StringComparer.Ordinal))
            {
                var fqn = r.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var nullQ = r.Type.IsReferenceType ? "?" : "";
                var isRefType = r.Type.IsReferenceType;

                w.Open($"public static bool AreDeepEqual(this {fqn}{nullQ} left, {fqn}{nullQ} right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)");
                w.Line("return DeepOps.AreEqual(left, right, ctx);");
                w.Close();
                w.Line();

                if (r.GenDiff)
                {
                    w.Open($"public static (bool has, DeepEqual.Generator.Shared.Diff<{fqn}> diff) GetDeepDiff(this {fqn}{nullQ} left, {fqn}{nullQ} right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)");
                    w.Line("return DeepOps.GetDiff(left, right, ctx);");
                    w.Close();
                    w.Line();
                }

                if (r.GenDelta)
                {
                    w.Open($"public static DeepEqual.Generator.Shared.DeltaDocument ComputeDeepDelta(this {fqn}{nullQ} left, {fqn}{nullQ} right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)");
                    w.Line("return DeepOps.ComputeDelta(left, right, ctx);");
                    w.Close();
                    w.Line();

                    if (isRefType)
                    {
                        // Reference types: cannot use `ref this`, return updated instance instead
                        w.Open($"public static {fqn}{nullQ} ApplyDeepDelta(this {fqn}{nullQ} target, in DeepEqual.Generator.Shared.DeltaReader reader)");
                        w.Line("DeepOps.ApplyDelta(ref target, in reader);");
                        w.Line("return target;");
                        w.Close();
                        w.Line();

                        w.Open($"public static {fqn}{nullQ} ApplyDeepDelta(this {fqn}{nullQ} target, DeepEqual.Generator.Shared.DeltaDocument delta)");
                        w.Line("DeepOps.ApplyDelta(ref target, delta);");
                        w.Line("return target;");
                        w.Close();
                        w.Line();
                    }
                    else
                    {
                        // Value types: `ref this` is valid and efficient
                        w.Open($"public static void ApplyDeepDelta(this ref {fqn} target, in DeepEqual.Generator.Shared.DeltaReader reader)");
                        w.Line("DeepOps.ApplyDelta(ref target, in reader);");
                        w.Close();
                        w.Line();

                        w.Open($"public static void ApplyDeepDelta(this ref {fqn} target, DeepEqual.Generator.Shared.DeltaDocument delta)");
                        w.Line("DeepOps.ApplyDelta(ref target, delta);");
                        w.Close();
                        w.Line();
                    }
                }
            }

            w.Close(); // class
            w.Close(); // namespace
            spc.AddSource("DeepOps.Extensions.g.cs", w.ToString());
        }

    }
}