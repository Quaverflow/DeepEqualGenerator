// <auto-generated/>
#nullable enable
using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace DeepEqual.Generator
{
    internal sealed class DeepOpsTypedApisEmitter
    {
        public void Emit(SourceProductionContext spc, (INamedTypeSymbol Type, bool GenDiff, bool GenDelta)[] roots)
        {
            var w = new CodeWriter();
            w.Line("// <auto-generated/>");
            w.Line("#pragma warning disable");
            w.Line("using System;");
            w.Line("using DeepEqual;");
            w.Line("using DeepEqual.Generator.Shared;");
            w.Line();
            w.Open("namespace DeepEqual");

            w.Open("public static partial class DeepOps");

            foreach (var r in roots.OrderBy(r => r.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat), StringComparer.Ordinal))
            {
                var fqn = r.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var nullQ = r.Type.IsReferenceType ? "?" : "";

                // AreEqual
                w.Open($"public static bool AreEqual({fqn}{nullQ} left, {fqn}{nullQ} right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)");
                w.Line("var c = ctx ?? new DeepEqual.Generator.Shared.ComparisonContext();");
                if (!r.Type.IsValueType)
                {
                    w.Line("if (object.ReferenceEquals(left, right)) return true;");
                    w.Line("if (left is null || right is null) return false;");
                }
                w.Line("return DeepEqual.Generator.Shared.ComparisonHelpers.DeepComparePolymorphic(left, right, c);");
                w.Close();
                w.Line();

                if (r.GenDiff)
                {
                    // GetDiff
                    w.Open($"public static (bool has, DeepEqual.Generator.Shared.Diff<{fqn}> diff) GetDiff({fqn}{nullQ} left, {fqn}{nullQ} right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)");
                    w.Line("var c = ctx ?? new DeepEqual.Generator.Shared.ComparisonContext();");
                    if (!r.Type.IsValueType)
                    {
                        w.Line("if (object.ReferenceEquals(left, right)) return (false, DeepEqual.Generator.Shared.Diff<" + fqn + ">.Empty);");
                        w.Line("if (left is null && right is not null) return (true, DeepEqual.Generator.Shared.Diff<" + fqn + ">.Replacement(right));");
                        w.Line("if (left is not null && right is null) return (true, DeepEqual.Generator.Shared.Diff<" + fqn + ">.Replacement(right));");
                    }
                    w.Line("DeepEqual.Generator.Shared.IDiff outDiff;");
                    w.Line("var has = DeepEqual.Generator.Shared.GeneratedHelperRegistry.TryGetDiffSameType(typeof(" + fqn + "), left!, right!, c, out outDiff);");
                    w.Open("if (has && outDiff is DeepEqual.Generator.Shared.Diff<" + fqn + "> typed)");
                    w.Line("return (!typed.IsEmpty, typed);");
                    w.Close();
                    w.Line("return (false, DeepEqual.Generator.Shared.Diff<" + fqn + ">.Empty);");
                    w.Close();
                    w.Line();
                }

                if (r.GenDelta)
                {
                    // ComputeDelta
                    w.Open($"public static DeepEqual.Generator.Shared.DeltaDocument ComputeDelta({fqn}{nullQ} left, {fqn}{nullQ} right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)");
                    w.Line("var c = ctx ?? new DeepEqual.Generator.Shared.ComparisonContext();");
                    w.Line("var doc = new DeepEqual.Generator.Shared.DeltaDocument();");
                    w.Line("var wtr = new DeepEqual.Generator.Shared.DeltaWriter(doc);");
                    if (!r.Type.IsValueType)
                    {
                        w.Line("if (object.ReferenceEquals(left, right)) return doc;");
                        w.Line("if (left is null && right is not null) { wtr.WriteReplaceObject(right); return doc; }");
                        w.Line("if (left is not null && right is null) { wtr.WriteReplaceObject(right); return doc; }");
                    }
                    w.Line("DeepEqual.Generator.Shared.GeneratedHelperRegistry.ComputeDeltaSameType(typeof(" + fqn + "), left!, right!, c, ref wtr);");
                    w.Line("return doc;");
                    w.Close();
                    w.Line();

                    // ApplyDelta
                    w.Open($"public static void ApplyDelta(ref {fqn}{nullQ} target, in DeepEqual.Generator.Shared.DeltaReader reader)");
                    w.Line("object? box = target;");
                    w.Line("var localReader = reader;");
                    w.Line("DeepEqual.Generator.Shared.GeneratedHelperRegistry.TryApplyDeltaSameType(typeof(" + fqn + "), ref box, ref localReader);");
                    w.Line("target = (" + fqn + nullQ + ")box;");
                    w.Close();
                    w.Line();

                    // Overload: ApplyDelta with document
                    w.Open($"public static void ApplyDelta(ref {fqn}{nullQ} target, DeepEqual.Generator.Shared.DeltaDocument delta)");
                    w.Line("var r = new DeepEqual.Generator.Shared.DeltaReader(delta);");
                    w.Line("ApplyDelta(ref target, in r);");
                    w.Close();
                    w.Line();
                }
            }

            w.Close(); // class
            w.Close(); // namespace

            spc.AddSource("DeepOps.TypedApis.g.cs", w.ToString());
        }
    }
}