using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace DeepEqual.Generator;

internal sealed class EqualityEmitter
{
    private const string DeepCompareAttributeName = GenCommon.DeepCompareAttributeMetadataName;
    private readonly HashSet<string> _emittedHelpers = new(StringComparer.Ordinal);

    public void EmitForRoot(SourceProductionContext spc, EqualityTarget root, string? hintOverride = null)
    {
        var rootFqn = root.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        var sanitizedId = GenCommon.SanitizeIdentifier(rootFqn);
        var hintName = hintOverride ?? GenCommon.SanitizeFileName(rootFqn + ".DeepOpsExtensions.Equality.g.cs");

        var reachable = GenCommon.BuildReachableTypeClosure(root);
        var trackCycles = root.CycleTrackingEnabled;
        var accessibility = root.IncludeInternals || root.Type.DeclaredAccessibility != Accessibility.Public
            ? "internal"
            : "public";
        var methodTypeParameters = GenCommon.GetTypeParameterList(root.Type);
        var methodConstraints = GenCommon.GetTypeConstraintClauses(root.Type);
        var nullSuffix = root.Type.IsReferenceType ? "?" : string.Empty;
        var ensureMethodName = "__EnsureEquality__" + sanitizedId;
        var guardFieldName = "__eqInit__" + sanitizedId;
        var lockFieldName = "__eqLock__" + sanitizedId;
        var moduleInitName = "__ModuleInit_Eq__" + sanitizedId;
        var helperName = GenCommon.GetHelperMethodName(root.Type);

        var w = new CodeWriter();
        w.Line("// <auto-generated/>");
        w.Line("#pragma warning disable");
        w.Line("using System;");
        w.Line("using System.Collections;");
        w.Line("using System.Collections.Generic;");
        w.Line("using DeepEqual.Generator.Shared;");
        w.Line();

        w.Open("namespace DeepEqual");
        w.Open("public static partial class DeepOpsExtensions");

        EmitterCommon.EmitEnsureOnce(
            w,
            ensureMethodName,
            guardFieldName,
            lockFieldName,
            writer =>
            {
                foreach (var t in reachable.Where(t => GenCommon.IsTypeAccessibleFromRoot(t, root))
                             .OrderBy(t => t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat), StringComparer.Ordinal))
                {
                    var fqn = t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                    var helper = GenCommon.GetHelperMethodName(t);
                    writer.Line("GeneratedHelperRegistry.RegisterComparer<" + fqn + ">((l, r, c) => " + helper + "(l, r, c));");
                }
            });
        EmitterCommon.EmitModuleInitializer(w, moduleInitName, ensureMethodName);

        var defaultContextExpr = trackCycles
            ? "new DeepEqual.Generator.Shared.ComparisonContext()"
            : "DeepEqual.Generator.Shared.ComparisonContext.NoTracking";

        var methodSignature = accessibility + " static bool AreDeepEqual" + methodTypeParameters +
                              "(this " + rootFqn + nullSuffix + " left, " + rootFqn + nullSuffix +
                              " right, DeepEqual.Generator.Shared.ComparisonContext? ctx = null)" + methodConstraints;
        w.Open(methodSignature);
        if (!root.Type.IsValueType)
        {
            w.Open("if (object.ReferenceEquals(left, right))");
            w.Line("return true;");
            w.Close();
            w.Open("if (left is null || right is null)");
            w.Line("return false;");
            w.Close();
        }

        w.Line(ensureMethodName + "();");
        w.Line("var context = ctx ?? " + defaultContextExpr + ";");
        w.Line("return " + helperName + "(left, right, context);");
        w.Close();
        w.Line();

        var optionsSignature = accessibility + " static bool AreDeepEqual" + methodTypeParameters +
                               "(this " + rootFqn + nullSuffix + " left, " + rootFqn + nullSuffix +
                               " right, DeepEqual.Generator.Shared.ComparisonOptions options)" + methodConstraints;
        w.Open(optionsSignature);
        w.Line("var context = new DeepEqual.Generator.Shared.ComparisonContext(options);");
        w.Line("return AreDeepEqual(left, right, context);");
        w.Close();
        w.Line();

        var emittedComparers = new HashSet<string>(StringComparer.Ordinal);
        var comparerDeclarations = new List<string[]>();

        foreach (var t in reachable.OrderBy(t => t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
                     StringComparer.Ordinal))
        {
            var helperKey = t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            if (!_emittedHelpers.Add(helperKey)) continue;
            EmitHelperForType(w, t, root, trackCycles, emittedComparers, comparerDeclarations, spc);
        }

        if (comparerDeclarations.Count > 0)
            foreach (var block in comparerDeclarations)
            foreach (var line in block)
                w.Line(line);

        w.Close();
        w.Close();

        var text = w.ToString();
        spc.AddSource(hintName, SourceText.From(text, Encoding.UTF8));
    }

    private void EmitHelperForType(CodeWriter w, INamedTypeSymbol type, EqualityTarget root, bool trackCycles,
        HashSet<string> emittedComparers, List<string[]> comparerDeclarations, SourceProductionContext spc)
    {
        var fqn = type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        var helper = GenCommon.GetHelperMethodName(type);
        var helperTypeParameters = GenCommon.EnumerateAllTypeParameters(type).ToArray();
        var helperTypeParameterList = GenCommon.GetTypeParameterList(helperTypeParameters);
        var helperConstraints = GenCommon.GetTypeConstraintClauses(helperTypeParameters);
        w.Open("private static bool " + helper + helperTypeParameterList + "(" + fqn + " left, " + fqn +
               " right, DeepEqual.Generator.Shared.ComparisonContext context)" + helperConstraints);

        if (!type.IsValueType)
        {
            w.Open("if (object.ReferenceEquals(left, right))");
            w.Line("return true;");
            w.Close();
            w.Open("if (left is null || right is null)");
            w.Line("return false;");
            w.Close();

            if (trackCycles)
            {
                w.Open("if (!context.Enter(left, right))");
                w.Line("return true;");
                w.Close();
                w.Open("try");
            }
        }

        var schema = GenCommon.GetTypeSchema(type);
        var inc = schema.IncludeMembers;
        var ign = schema.IgnoreMembers;
        if (inc.Count > 0 && ign.Count > 0)
            for (var i = 0; i < inc.Count; i++)
            {
                var name = inc[i];
                if (ign.Contains(name, StringComparer.Ordinal))
                {
                    var attr = type.GetAttributes()
                        .FirstOrDefault(a => a.AttributeClass?.ToDisplayString() == DeepCompareAttributeName);
                    var loc = attr?.ApplicationSyntaxReference?.GetSyntax(spc.CancellationToken).GetLocation() ??
                              type.Locations.FirstOrDefault();
                    if (loc is not null) spc.ReportDiagnostic(Diagnostic.Create(Diagnostics.EQ001, loc, name));

                    break;
                }
            }

        foreach (var member in GenCommon.OrderMembers(GenCommon.EnumerateMembers(type, root.IncludeInternals, root.IncludeBaseMembers,
                     schema))) EmitMember(w, type, member, root, emittedComparers, comparerDeclarations, spc);

        w.Line("return true;");
        if (!type.IsValueType && trackCycles)
        {
            w.Close();
            w.Open("finally");
            w.Line("context.Exit(left, right);");
            w.Close();
        }

        w.Close();
        w.Line();
    }

    private void EmitMember(CodeWriter w, INamedTypeSymbol owner, EqualityMemberSymbol equalityMember,
        EqualityTarget root,
        HashSet<string> emittedComparers, List<string[]> comparerDeclarations, SourceProductionContext spc)
    {
        var leftExpr = "left." + equalityMember.Name;
        var rightExpr = "right." + equalityMember.Name;
        var deepAttr = GenCommon.GetDeepCompareAttribute(equalityMember.Symbol);
        var kind = GenCommon.GetEffectiveKind(equalityMember.Type, deepAttr);
        {
            var all = equalityMember.Symbol.GetAttributes()
                .Where(a => a.AttributeClass?.ToDisplayString() == DeepCompareAttributeName).ToArray();
            if (all.Length > 1)
            {
                var loc = all[0].ApplicationSyntaxReference?.GetSyntax(spc.CancellationToken).GetLocation() ??
                          equalityMember.Symbol.Locations.FirstOrDefault();
                if (loc is not null)
                    spc.ReportDiagnostic(Diagnostic.Create(Diagnostics.EQ001, loc, equalityMember.Name));
            }

            if (kind == EffectiveKind.Deep)
            {
                var t = equalityMember.Type;
                if (t is INamedTypeSymbol n && GenCommon.IsUserObjectType(n) && !GenCommon.IsTypeAccessibleFromRoot(n, root))
                {
                    var attr = all.FirstOrDefault();
                    var loc2 = attr?.ApplicationSyntaxReference?.GetSyntax(spc.CancellationToken).GetLocation() ??
                               equalityMember.Symbol.Locations.FirstOrDefault();
                    if (loc2 is not null)
                        spc.ReportDiagnostic(Diagnostic.Create(Diagnostics.EQ002, loc2,
                            n.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)));
                }
            }
        }

        if (kind == EffectiveKind.Skip)
        {
            w.Line();
            return;
        }

        var isString = equalityMember.Type.SpecialType == SpecialType.System_String;
        if (!equalityMember.Type.IsValueType && !isString)
        {
            w.Open("if (!object.ReferenceEquals(" + leftExpr + ", " + rightExpr + "))");
            w.Open("if (" + leftExpr + " is null || " + rightExpr + " is null)");
            w.Line("return false;");
            w.Close();
            w.Close();
        }

        if (kind == EffectiveKind.Reference)
        {
            w.Open("if (!object.ReferenceEquals(" + leftExpr + ", " + rightExpr + "))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        var directCustomCmp = GenCommon.GetEffectiveComparerType(equalityMember.Type, deepAttr);
        if (directCustomCmp is not null)
        {
            var cmpFqn = directCustomCmp.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var tFqn = equalityMember.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var customVar = "__cmp_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                            GenCommon.SanitizeIdentifier(equalityMember.Name);
            w.Line("var " + customVar + " = (System.Collections.Generic.IEqualityComparer<" + tFqn +
                   ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!;");
            w.Open("if (!" + customVar + ".Equals(" + leftExpr + ", " + rightExpr + "))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (kind == EffectiveKind.Shallow)
        {
            w.Open("if (!object.Equals(" + leftExpr + ", " + rightExpr + "))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (equalityMember.Type is INamedTypeSymbol nnt0 &&
            nnt0.OriginalDefinition.ToDisplayString() == "System.Nullable<T>")
        {
            var valueT = nnt0.TypeArguments[0];
            var customCmpT = GenCommon.GetEffectiveComparerType(valueT, deepAttr);
            string? customVar = null;
            if (customCmpT is not null)
            {
                var cmpFqn = customCmpT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                var elFqn2 = valueT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                customVar = "__cmp_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                            GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + customVar + " = (System.Collections.Generic.IEqualityComparer<" + elFqn2 +
                       ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!;");
            }

            w.Open("if (" + leftExpr + ".HasValue != " + rightExpr + ".HasValue)");
            w.Line("return false;");
            w.Close();
            w.Open("if (" + leftExpr + ".HasValue)");
            if (customVar is not null)
            {
                w.Open("if (!" + customVar + ".Equals(" + leftExpr + ".Value, " + rightExpr + ".Value))");
                w.Line("return false;");
                w.Close();
            }
            else
            {
                EmitNullableValueCompare_NoCustom(w, leftExpr, rightExpr, valueT);
            }

            w.Close();
            w.Line();
            return;
        }

        if (GenCommon.TryEmitWellKnownStructCompare(w, leftExpr, rightExpr, equalityMember.Type))
        {
            w.Line();
            return;
        }

        if (equalityMember.Type.SpecialType == SpecialType.System_String)
        {
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualStrings(" + leftExpr + ", " + rightExpr +
                   ", context))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (equalityMember.Type.TypeKind == TypeKind.Enum)
        {
            var enumFqn = equalityMember.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualEnum<" + enumFqn + ">(" + leftExpr +
                   ", " + rightExpr + "))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (GenCommon.IsNumericWithTolerance(equalityMember.Type))
        {
            var call = GenCommon.GetNumericCall(equalityMember.Type, leftExpr, rightExpr, "context");
            w.Open("if (!" + call + ")");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (GenCommon.TryGetReadOnlyMemory(equalityMember.Type, out var romEl))
        {
            var elFqn = romEl!.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var elKind = GenCommon.GetEffectiveKind(romEl, null);
            var elemCustomCmpT = GenCommon.GetEffectiveComparerType(romEl, deepAttr);
            string? elemCustomVar = null;
            if (elemCustomCmpT is not null)
            {
                var cmpFqn = elemCustomCmpT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                elemCustomVar = "__cmpE_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                                GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + elemCustomVar + " = (System.Collections.Generic.IEqualityComparer<" + elFqn +
                       ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!;");
            }

            var cmpName = GenCommon.EnsureComparerStruct(emittedComparers, comparerDeclarations, romEl, elKind,
                "M_" + GenCommon.SanitizeIdentifier(owner.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)) +
                "_" +
                equalityMember.Name, elemCustomVar);
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualReadOnlyMemory<" + elFqn + ", " +
                   cmpName + ">(" + leftExpr + ", " + rightExpr + ", new " + cmpName + "(" + (elemCustomVar ?? "") +
                   "), context))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (GenCommon.TryGetMemory(equalityMember.Type, out var memEl))
        {
            var elFqn = memEl!.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var elKind = GenCommon.GetEffectiveKind(memEl, null);
            var elemCustomCmpT = GenCommon.GetEffectiveComparerType(memEl, deepAttr);
            string? elemCustomVar = null;
            if (elemCustomCmpT is not null)
            {
                var cmpFqn = elemCustomCmpT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                elemCustomVar = "__cmpE_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                                GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + elemCustomVar + " = (System.Collections.Generic.IEqualityComparer<" + elFqn +
                       ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!;");
            }

            var cmpName = GenCommon.EnsureComparerStruct(emittedComparers, comparerDeclarations, memEl, elKind,
                "M_" + GenCommon.SanitizeIdentifier(owner.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)) +
                "_" +
                equalityMember.Name, elemCustomVar);
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualMemory<" + elFqn + ", " + cmpName + ">(" +
                   leftExpr + ", " + rightExpr + ", new " + cmpName + "(" + (elemCustomVar ?? "") + "), context))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (equalityMember.Type.IsValueType && equalityMember.Type.SpecialType != SpecialType.None)
        {
            w.Open("if (!" + leftExpr + ".Equals(" + rightExpr + "))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }
        if (equalityMember.Type is IArrayTypeSymbol arr)
        {
            var el = arr.ElementType;
            var elFqn = el.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var unordered = arr.Rank == 1 && GenCommon.ResolveOrderInsensitive(root.OrderInsensitiveCollections, deepAttr, el, owner);
            var elKind = GenCommon.GetEffectiveKind(el, null);

            var elemCustomCmpT = GenCommon.GetEffectiveComparerType(el, deepAttr);
            string? elemCustomVar = null;
            if (elemCustomCmpT is not null)
            {
                var cmpFqn = elemCustomCmpT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                elemCustomVar = "__cmpE_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                                GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + elemCustomVar + " = (System.Collections.Generic.IEqualityComparer<" + elFqn +
                       ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!;");
            }

            var cmpName = GenCommon.EnsureComparerStruct(emittedComparers, comparerDeclarations, el, elKind,
                "M_" + GenCommon.SanitizeIdentifier(owner.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)) +
                "_" + equalityMember.Name, elemCustomVar);

            // Keyed unordered (rank==1 only) — compare arrays by grouping on the key, no IReadOnlyList casts.
            if (unordered && GenCommon.TryGetKeySpec(el, deepAttr, root, out var keyTypeFqn, out var keyExprFmt))
            {
                // a[] / b[] strong-typed views
                var aArr = "__arrA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);
                var bArr = "__arrB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);

                // groupings
                var dictA = "__ka_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);
                var dictB = "__kb_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);

                // temps
                var tmpA = "__eA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);
                var tmpB = "__eB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);

                w.Line("var " + aArr + " = " + leftExpr + " as " + elFqn + "[];");
                w.Line("var " + bArr + " = " + rightExpr + " as " + elFqn + "[];");

                w.Open("if (!object.ReferenceEquals(" + aArr + ", " + bArr + "))");
                w.Open("if (" + aArr + " is null || " + bArr + " is null)");
                w.Line("return false;");
                w.Close();

                w.Open("if (" + aArr + ".Length != " + bArr + ".Length)");
                w.Line("return false;");
                w.Close();

                w.Line("var " + dictA + " = new System.Collections.Generic.Dictionary<" + keyTypeFqn +
                       ", System.Collections.Generic.List<" + elFqn + ">>();");
                w.Line("var " + dictB + " = new System.Collections.Generic.Dictionary<" + keyTypeFqn +
                       ", System.Collections.Generic.List<" + elFqn + ">>();");

                // Build A buckets
                w.Open("for (int __i = 0; __i < " + aArr + ".Length; __i++)");
                w.Line("var " + tmpA + " = " + aArr + "[__i];");
                w.Line("var __k = " + string.Format(keyExprFmt, tmpA) + ";");
                w.Open("if (!" + dictA + ".TryGetValue(__k, out var __lst))");
                w.Line("__lst = " + dictA + "[__k] = new System.Collections.Generic.List<" + elFqn + ">();");
                w.Close();
                w.Line("__lst.Add(" + tmpA + ");");
                w.Close();

                // Build B buckets
                w.Open("for (int __j = 0; __j < " + bArr + ".Length; __j++)");
                w.Line("var " + tmpB + " = " + bArr + "[__j];");
                w.Line("var __k = " + string.Format(keyExprFmt, tmpB) + ";");
                w.Open("if (!" + dictB + ".TryGetValue(__k, out var __lst))");
                w.Line("__lst = " + dictB + "[__k] = new System.Collections.Generic.List<" + elFqn + ">();");
                w.Close();
                w.Line("__lst.Add(" + tmpB + ");");
                w.Close();

                w.Line("if (" + dictA + ".Count != " + dictB + ".Count) return false;");
                w.Open("foreach (var __kv in " + dictA + ")");
                w.Open("if (!" + dictB + ".TryGetValue(__kv.Key, out var __lstB))");
                w.Line("return false;");
                w.Close();

                w.Line("if (__kv.Value.Count != __lstB.Count) return false;");

                // match within each bucket using element comparer
                var matchMask = "__m_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" + GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + matchMask + " = new bool[__lstB.Count];");
                w.Line("var __cmp = new " + cmpName + "(" + (elemCustomVar ?? "") + ");");

                w.Open("for (int __x = 0; __x < __kv.Value.Count; __x++)");
                w.Line("bool __f = false;");
                w.Open("for (int __y = 0; __y < __lstB.Count; __y++)");
                w.Open("if (!" + matchMask + "[__y])");
                w.Open("if (__cmp.Invoke(__kv.Value[__x], __lstB[__y], context))");
                w.Line(matchMask + "[__y] = (__f = true);");
                w.Close();
                w.Close();
                w.Close();
                w.Open("if (!__f)");
                w.Line("return false;");
                w.Close();
                w.Close();
                w.Close();
                w.Close();

                w.Line();
                return;
            }
            else if (unordered && GenCommon.IsHashFriendly(el))
            {
                // Fast multiset compare for hash-friendly elements (string/primitive/enums etc.)
                var eqExpr = GenCommon.GetEqualityComparerExprForHash(el, "context", elemCustomVar);

                w.Open("if (!object.ReferenceEquals(" + leftExpr + ", " + rightExpr + "))");
                w.Open("if (" + leftExpr + " is null || " + rightExpr + " is null)");
                w.Line("return false;");
                w.Close();
                w.Open("if (" + leftExpr + ".Length != " + rightExpr + ".Length)");
                w.Line("return false;");
                w.Close();

                w.Line("var __ra = new System.Collections.Generic.List<" + elFqn + ">(" + leftExpr + ");");
                w.Line("var __rb = new System.Collections.Generic.List<" + elFqn + ">(" + rightExpr + ");");
                w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualSequencesUnorderedHash(__ra, __rb, " + eqExpr + "))");
                w.Line("return false;");
                w.Close();
                w.Close();
            }
            else
            {
                // Ordered comparison; use array helpers
                if (arr.Rank == 1)
                {
                    w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualArrayRank1<" + elFqn + ", " + cmpName + ">("
                           + leftExpr + " as " + elFqn + "[], "
                           + rightExpr + " as " + elFqn + "[], "
                           + "new " + cmpName + "(" + (elemCustomVar ?? "") + "), context))");
                    w.Line("return false;");
                    w.Close();
                }
                else
                {
                    w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualArray<" + elFqn + ", " + cmpName + ">("
                           + "(Array?)" + leftExpr + ", "
                           + "(Array?)" + rightExpr + ", "
                           + "new " + cmpName + "(" + (elemCustomVar ?? "") + "), context))");
                    w.Line("return false;");
                    w.Close();
                }
            }

            w.Line();
            return;
        }


        if (GenCommon.TryGetDictionaryInterface(equalityMember.Type, out var keyT, out var valT))
        {
            var kFqn = keyT!.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var vFqn = valT!.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var vKind = GenCommon.GetEffectiveKind(valT, null);

            var valCustomCmpT = GenCommon.GetEffectiveComparerType(valT, deepAttr);
            string? valCustomVar = null;
            if (valCustomCmpT is not null)
            {
                var cmpFqn = valCustomCmpT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                valCustomVar = "__cmpV_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                               GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + valCustomVar + " = (System.Collections.Generic.IEqualityComparer<" + vFqn +
                       ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!");
            }

            var cmpAny = GenCommon.EnsureComparerStruct(
                emittedComparers, comparerDeclarations, valT, vKind,
                "M_" + GenCommon.SanitizeIdentifier(owner.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)) +
                "_" +
                equalityMember.Name + "_Val",
                valCustomVar
            );

            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualDictionariesAny<" + kFqn + ", " + vFqn +
                   ", " + cmpAny + ">(" +
                   leftExpr + ", " + rightExpr + ", new " + cmpAny + "(" + (valCustomVar ?? "") + "), context))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (GenCommon.TryGetEnumerableInterface(equalityMember.Type, out var elT))
        {
            var elFqn = elT!.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var elKind = GenCommon.GetEffectiveKind(elT, null);
            var unordered = GenCommon.ResolveOrderInsensitive(root.OrderInsensitiveCollections, deepAttr, elT, owner);

            var elemCustomCmpT = GenCommon.GetEffectiveComparerType(elT, deepAttr);
            string? elemCustomVar = null;
            if (elemCustomCmpT is not null)
            {
                var cmpFqn = elemCustomCmpT.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                elemCustomVar = "__cmpE_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                                GenCommon.SanitizeIdentifier(equalityMember.Name);
                w.Line("var " + elemCustomVar + " = (System.Collections.Generic.IEqualityComparer<" + elFqn +
                       ">)System.Activator.CreateInstance(typeof(" + cmpFqn + "))!;");
            }

            if (unordered &&
                GenCommon.TryGetKeySpec(elT, deepAttr, root, out var keyTypeFqn2, out var keyExprFmt2) &&
                GenCommon.IsUserObjectType(elT))
            {
                var la = "__seqA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                         GenCommon.SanitizeIdentifier(equalityMember.Name);
                var lb = "__seqB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                         GenCommon.SanitizeIdentifier(equalityMember.Name);
                var da = "__dictA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                         GenCommon.SanitizeIdentifier(equalityMember.Name);
                var db = "__dictB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                         GenCommon.SanitizeIdentifier(equalityMember.Name);
                var tmpA = "__eA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                           GenCommon.SanitizeIdentifier(equalityMember.Name);
                var tmpB = "__eB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                           GenCommon.SanitizeIdentifier(equalityMember.Name);
                var cmpName = GenCommon.EnsureComparerStruct(
                    emittedComparers, comparerDeclarations, elT, elKind,
                    "M_" +
                    GenCommon.SanitizeIdentifier(owner.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)) +
                    "_" +
                    equalityMember.Name,
                    elemCustomVar);

                w.Line("var " + la + " = " + leftExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">;");
                w.Line("var " + lb + " = " + rightExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">;");

                w.Open("if (!object.ReferenceEquals(" + la + ", " + lb + "))");
                w.Open("if (" + la + " is null || " + lb + " is null)");
                w.Line("return false;");
                w.Close();

                w.Line("var " + da + " = new System.Collections.Generic.Dictionary<" + keyTypeFqn2 +
                       ", System.Collections.Generic.List<" + elFqn + ">>();");
                w.Line("var " + db + " = new System.Collections.Generic.Dictionary<" + keyTypeFqn2 +
                       ", System.Collections.Generic.List<" + elFqn + ">>();");

                w.Open("foreach (var " + tmpA + " in " + la + ")");
                w.Line("var __k = " + string.Format(keyExprFmt2, tmpA) + ";");
                w.Open("if (!" + da + ".TryGetValue(__k, out var __lst))");
                w.Line("__lst = " + da + "[__k] = new System.Collections.Generic.List<" + elFqn + ">();");
                w.Close();
                w.Line("__lst.Add(" + tmpA + ");");
                w.Close();
                w.Open("foreach (var " + tmpB + " in " + lb + ")");
                w.Line("var __k = " + string.Format(keyExprFmt2, tmpB) + ";");
                w.Open("if (!" + db + ".TryGetValue(__k, out var __lst))");
                w.Line("__lst = " + db + "[__k] = new System.Collections.Generic.List<" + elFqn + ">();");
                w.Close();
                w.Line("__lst.Add(" + tmpB + ");");
                w.Close();
                w.Line("if (" + da + ".Count != " + db + ".Count) return false;");
                w.Open("foreach (var __kv in " + da + ")");
                w.Open("if (!" + db + ".TryGetValue(__kv.Key, out var __lstB))");
                w.Line("return false;");
                w.Close();
                w.Line("if (__kv.Value.Count != __lstB.Count) return false;");
                w.Line("var __m = new bool[__lstB.Count];");
                w.Line("var __cmp = new " + cmpName + "(" + (elemCustomVar ?? "") + ");");

                w.Open("for (int __x = 0; __x < __kv.Value.Count; __x++)");
                w.Line("bool __f = false;");
                w.Open("for (int __y = 0; __y < __lstB.Count; __y++)");
                w.Open("if (!__m[__y])");
                w.Open("if (__cmp.Invoke(__kv.Value[__x], __lstB[__y], context))");
                w.Line("__m[__y] = (__f = true);");
                w.Close();
                w.Close();
                w.Close();
                w.Open("if (!__f)");
                w.Line("return false;");
                w.Close();
                w.Close();
                w.Close();
                w.Close();
                w.Line();
                return;
            }

            if (unordered && GenCommon.IsHashFriendly(elT))
            {
                var la = "__seqA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                         GenCommon.SanitizeIdentifier(equalityMember.Name);
                var lb = "__seqB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                         GenCommon.SanitizeIdentifier(equalityMember.Name);
                var eqExpr = GenCommon.GetEqualityComparerExprForHash(elT, "context", elemCustomVar);

                w.Line("var " + la + " = " + leftExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">;");
                w.Line("var " + lb + " = " + rightExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">;");

                w.Open("if (!object.ReferenceEquals(" + la + ", " + lb + "))");
                w.Open("if (" + la + " is null || " + lb + " is null)");
                w.Line("return false;");
                w.Close();

                w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualSequencesUnorderedHash<" + elFqn +
                       ">(" + la + ", " + lb + ", " + eqExpr + "))");
                w.Line("return false;");
                w.Close();

                w.Close();
            }
            else
            {
                var cmpName = GenCommon.EnsureComparerStruct(
                    emittedComparers, comparerDeclarations, elT, elKind,
                    "M_" +
                    GenCommon.SanitizeIdentifier(owner.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)) +
                    "_" +
                    equalityMember.Name,
                    elemCustomVar);

                if (unordered)
                {
                    w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualSequencesUnordered<" + elFqn +
                           ", " + cmpName + ">("
                           + leftExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">, "
                           + rightExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">, "
                           + "new " + cmpName + "(" + (elemCustomVar ?? "") + "), context))");
                    w.Line("return false;");
                    w.Close();
                }
                else
                {
                    var roListA = "__roA_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                                  GenCommon.SanitizeIdentifier(equalityMember.Name);
                    var roListB = "__roB_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                                  GenCommon.SanitizeIdentifier(equalityMember.Name);

                    w.Line("var " + roListA + " = " + leftExpr + " as System.Collections.Generic.IReadOnlyList<" +
                           elFqn + ">;");
                    w.Line("var " + roListB + " = " + rightExpr + " as System.Collections.Generic.IReadOnlyList<" +
                           elFqn + ">;");
                    w.Open("if (" + roListA + " is not null && " + roListB + " is not null)");
                    w.Open("if (" + roListA + ".Count != " + roListB + ".Count)");
                    w.Line("return false;");
                    w.Close();
                    w.Line("var __cmp = new " + cmpName + "(" + (elemCustomVar ?? "") + ");");
                    w.Line("var __n = " + roListA + ".Count;");
                    w.Open("for (int __i = 0; __i < __n; __i++)");
                    w.Open("if (!__cmp.Invoke(" + roListA + "[__i], " + roListB + "[__i], context))");
                    w.Line("return false;");
                    w.Close();
                    w.Close();
                    w.Line("goto __SEQ_OK_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                           GenCommon.SanitizeIdentifier(equalityMember.Name) + ";");
                    w.Close();
                    w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualSequencesOrdered<" + elFqn +
                           ", " + cmpName + ">("
                           + leftExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">, "
                           + rightExpr + " as System.Collections.Generic.IEnumerable<" + elFqn + ">, "
                           + "new " + cmpName + "(" + (elemCustomVar ?? "") + "), context))");
                    w.Line("return false;");
                    w.Close();

                    w.Line("__SEQ_OK_" + GenCommon.SanitizeIdentifier(owner.Name) + "_" +
                           GenCommon.SanitizeIdentifier(equalityMember.Name) + ":;");
                }

                w.Line();
                return;
            }


            w.Line();
            return;
        }

        if ((equalityMember.Type.TypeKind == TypeKind.Interface ||
             equalityMember.Type is INamedTypeSymbol { IsAbstract: true })
            && !(GenCommon.TryGetDictionaryInterface(equalityMember.Type, out _, out _) ||
                 GenCommon.TryGetEnumerableInterface(equalityMember.Type, out _)))
        {
            var declFqn = equalityMember.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.DeepComparePolymorphic<" + declFqn + ">(" +
                   leftExpr + ", " + rightExpr + ", context))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (equalityMember.Type.SpecialType == SpecialType.System_Object)
        {
            w.Open("if (!DeepEqual.Generator.Shared.DynamicDeepComparer.AreEqualDynamic(" + leftExpr + ", " +
                   rightExpr + ", context))");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        if (equalityMember.Type is INamedTypeSymbol nts && GenCommon.IsUserObjectType(nts)
                                                        && !(nts.IsAbstract || nts.TypeKind == TypeKind.Interface))
        {
            var helperExpr = GenCommon.GetHelperMethodName(nts) + "(" + leftExpr + ", " + rightExpr + ", context)";
            w.Open("if (!" + helperExpr + ")");
            w.Line("return false;");
            w.Close();
            w.Line();
            return;
        }

        w.Open("if (!object.Equals(" + leftExpr + ", " + rightExpr + "))");
        w.Line("return false;");
        w.Close();
        w.Line();
    }

    private void EmitNullableValueCompare_NoCustom(CodeWriter w, string leftExpr, string rightExpr,
        ITypeSymbol valueType)
    {
        if (GenCommon.TryEmitWellKnownStructCompare(w, leftExpr + ".Value", rightExpr + ".Value", valueType)) return;

        if (valueType.TypeKind == TypeKind.Enum)
        {
            var enumFqn = valueType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualEnum<" + enumFqn + ">(" + leftExpr +
                   ".Value, " + rightExpr + ".Value))");
            w.Line("return false;");
            w.Close();
            return;
        }

        if (valueType.SpecialType == SpecialType.System_String)
        {
            w.Open("if (!DeepEqual.Generator.Shared.ComparisonHelpers.AreEqualStrings(" + leftExpr + ".Value, " +
                   rightExpr + ".Value, context))");
            w.Line("return false;");
            w.Close();
            return;
        }

        if (GenCommon.IsNumericWithTolerance(valueType))
        {
            var call = GenCommon.GetNumericCall(valueType, leftExpr + ".Value", rightExpr + ".Value", "context");
            w.Open("if (!" + call + ")");
            w.Line("return false;");
            w.Close();
            return;
        }

        if (valueType.IsValueType && valueType.SpecialType != SpecialType.None)
        {
            w.Open("if (!" + leftExpr + ".Value.Equals(" + rightExpr + ".Value))");
            w.Line("return false;");
            w.Close();
            return;
        }

        if (valueType is INamedTypeSymbol namedTypeSymbol && GenCommon.IsUserObjectType(namedTypeSymbol)
                                                          && !(namedTypeSymbol.IsAbstract ||
                                                               namedTypeSymbol.TypeKind == TypeKind.Interface))
        {
            var helperExpr = GenCommon.GetHelperMethodName(namedTypeSymbol) + "(" + leftExpr + ".Value, " + rightExpr +
                             ".Value, context)";
            w.Open("if (!" + helperExpr + ")");
            w.Line("return false;");
            w.Close();
            return;
        }


        w.Open("if (!object.Equals(" + leftExpr + ".Value, " + rightExpr + ".Value))");
        w.Line("return false;");
        w.Close();
    }

}